1. ARM vs x86 Architecture – Pros & Cons\\\

ARM: Used in mobile devices, tablets, and modern laptops (like Apple M1/M2).

x86: Used in desktops, traditional laptops, and servers (Intel/AMD).

Feature	                     ARM Architecture	                        x86 Architecture
Power Efficiency	    Very efficient (long battery life)	             Less efficient
Performance	                Good for most tasks	                  High performance for heavy tasks
Cost	                    Cheaper to manufacture	                  Usually more expensive
Compatibility	          Limited for legacy software                  Wide software support
Heat Generation	                Less heat	                                More heat
Devices	                  Mobile, Tablets, Apple Macs	                PCs, Laptops, Servers

2. File System Indexing, Memory Management, and Process Scheduling\\\\

A. File System Indexing::::
OS keeps track of where files are stored using data structures like inodes (Linux) or MFT (Windows NTFS).

Indexing speeds up file search and access.

Example:
When you save a file, the OS stores:

File name

Location on disk

Size, permissions, timestamps (metadata)

B. Memory Management::::
OS allocates memory to each process and keeps track using virtual memory.

Uses paging and segmentation to handle memory efficiently.

Swaps inactive memory pages to disk when RAM is full (swap space).

 Real-World Example:
Opening too many apps may slow down your PC because of memory swapping.

C. Process Scheduling::::
OS decides which process runs next based on scheduling algorithms

FCFS (First Come First Serve)

Round Robin

Priority Scheduling

Ensures smooth multitasking and efficient CPU usage.


3. Frontend JS Method to Find OS and Device Details\\\\\

In frontend JavaScript, we don’t have access to the full operating system like we do in backend (Node.js), 
but we can get basic system information from the browser using the navigator object.

The two most important properties are:

navigator.platform: gives a string representing the platform/OS.

navigator.userAgent: gives a long string with details about the browser, OS, and device.

Uses::::

* Knowing the user's device and OS allows developers to:

* Optimize UI/UX for mobile vs desktop

* Fix platform-specific bugs

* Show platform-specific instructions (e.g., “Download for Windows” or “iOS App Available”)

* Adjust features depending on capabilities (e.g., limit animations on older mobile devices)

Code Explanation:::::

const os = navigator.platform;
Returns the base operating system or architecture (e.g., "Win32", "MacIntel", "Linux armv8l")


const userAgent = navigator.userAgent;
Returns a long string containing the browser name, version, engine, and OS

Example:

Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/114.0.5735.110

const isMobile = /Mobi|Android/i.test(userAgent);
Uses a regular expression to test if the userAgent contains "Mobi" or "Android"

Helps determine if the user is on a mobile device

Code Example ::::

<!DOCTYPE html>
<html>
  <head>
    <title>Device Info</title>
   </head>
   <body>
    <script>
      const os = navigator.platform;
      const userAgent = navigator.userAgent;
      const isMobile = /Mobi|Android/i.test(userAgent);

      console.log("OS:", os);
      console.log("User Agent:", userAgent);
      console.log("Is Mobile:", isMobile);
    </script>
  </body>
</html>

Sample Output::::

OS: Win32
User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)
Is Mobile: false

